<?php
/**
 * DomainServices
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainServices Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainServices implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainServices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_mx' => '\Swagger\Client\Model\BackupMx[]',
        'mail_proxy' => '\Swagger\Client\Model\MailProxy[]',
        'redirect' => '\Swagger\Client\Model\Redirect[]',
        'domain_monitoring' => '\Swagger\Client\Model\DomainMonitoring[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_mx' => null,
        'mail_proxy' => null,
        'redirect' => null,
        'domain_monitoring' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_mx' => 'backupMx',
        'mail_proxy' => 'mailProxy',
        'redirect' => 'redirect',
        'domain_monitoring' => 'domainMonitoring'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_mx' => 'setBackupMx',
        'mail_proxy' => 'setMailProxy',
        'redirect' => 'setRedirect',
        'domain_monitoring' => 'setDomainMonitoring'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_mx' => 'getBackupMx',
        'mail_proxy' => 'getMailProxy',
        'redirect' => 'getRedirect',
        'domain_monitoring' => 'getDomainMonitoring'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_mx'] = isset($data['backup_mx']) ? $data['backup_mx'] : null;
        $this->container['mail_proxy'] = isset($data['mail_proxy']) ? $data['mail_proxy'] : null;
        $this->container['redirect'] = isset($data['redirect']) ? $data['redirect'] : null;
        $this->container['domain_monitoring'] = isset($data['domain_monitoring']) ? $data['domain_monitoring'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_mx
     *
     * @return \Swagger\Client\Model\BackupMx[]
     */
    public function getBackupMx()
    {
        return $this->container['backup_mx'];
    }

    /**
     * Sets backup_mx
     *
     * @param \Swagger\Client\Model\BackupMx[] $backup_mx Removes pending services like BackupMX and MailProxy.
     *
     * @return $this
     */
    public function setBackupMx($backup_mx)
    {
        $this->container['backup_mx'] = $backup_mx;

        return $this;
    }

    /**
     * Gets mail_proxy
     *
     * @return \Swagger\Client\Model\MailProxy[]
     */
    public function getMailProxy()
    {
        return $this->container['mail_proxy'];
    }

    /**
     * Sets mail_proxy
     *
     * @param \Swagger\Client\Model\MailProxy[] $mail_proxy Removes pending services like BackupMX and MailProxy.
     *
     * @return $this
     */
    public function setMailProxy($mail_proxy)
    {
        $this->container['mail_proxy'] = $mail_proxy;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return \Swagger\Client\Model\Redirect[]
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param \Swagger\Client\Model\Redirect[] $redirect Removes pending services like BackupMX and MailProxy.
     *
     * @return $this
     */
    public function setRedirect($redirect)
    {
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets domain_monitoring
     *
     * @return \Swagger\Client\Model\DomainMonitoring[]
     */
    public function getDomainMonitoring()
    {
        return $this->container['domain_monitoring'];
    }

    /**
     * Sets domain_monitoring
     *
     * @param \Swagger\Client\Model\DomainMonitoring[] $domain_monitoring Removes pending services like BackupMX and MailProxy.
     *
     * @return $this
     */
    public function setDomainMonitoring($domain_monitoring)
    {
        $this->container['domain_monitoring'] = $domain_monitoring;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns all values
     * toArray(true) => returns only non empty values
     * toArray(true, ["key"]) => returns all non empty values and "key" even if empty
     * toArray(true, ["key:no_empty_value"]) => returns all non empty values and "key" if not empty
     */
    public function toArray($removeEmptyValues = false, $retrieveKeys = []){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!in_array($key, $retrieveKeys) && $removeEmptyValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            if(in_array($key.":no_empty_value", $retrieveKeys)){
                unset($container[$key]);
                continue;
            }
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
        };
        return $container;
    }
}


