<?php
/**
 * ZoneBasePatchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ZoneBasePatchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZoneBasePatchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZoneBasePatchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'origin' => 'string',
        'idn' => 'string',
        'soa' => '\Swagger\Client\Model\Soa',
        'dnssec' => 'bool',
        'name_server_group' => 'string',
        'allow_transfer' => 'bool',
        'owner' => '\Swagger\Client\Model\BasicUser',
        'updater' => '\Swagger\Client\Model\BasicUser',
        'log_id' => 'int',
        'comment' => 'string',
        'domainsafe' => 'bool',
        'source' => 'string',
        'source_virtual_hostname' => 'string',
        'zone_grants_add' => 'string[]',
        'zone_grants_rem' => 'string[]',
        'name_servers' => '\Swagger\Client\Model\NameServer[]',
        'main' => '\Swagger\Client\Model\MainIp',
        'www_include' => 'bool',
        'virtual_name_server' => 'string',
        'free_text' => 'string[]',
        'action' => '\Swagger\Client\Model\NameserverActionConstants',
        'grants' => 'string[]',
        'resource_records' => '\Swagger\Client\Model\ResourceRecord[]',
        'roid' => 'int',
        'resource_records_add' => '\Swagger\Client\Model\ResourceRecord[]',
        'resource_records_rem' => '\Swagger\Client\Model\ResourceRecord[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'origin' => null,
        'idn' => null,
        'soa' => null,
        'dnssec' => null,
        'name_server_group' => null,
        'allow_transfer' => null,
        'owner' => null,
        'updater' => null,
        'log_id' => 'int64',
        'comment' => null,
        'domainsafe' => null,
        'source' => null,
        'source_virtual_hostname' => null,
        'zone_grants_add' => null,
        'zone_grants_rem' => null,
        'name_servers' => null,
        'main' => null,
        'www_include' => null,
        'virtual_name_server' => null,
        'free_text' => null,
        'action' => null,
        'grants' => null,
        'resource_records' => null,
        'roid' => 'int32',
        'resource_records_add' => null,
        'resource_records_rem' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'origin' => 'origin',
        'idn' => 'idn',
        'soa' => 'soa',
        'dnssec' => 'dnssec',
        'name_server_group' => 'nameServerGroup',
        'allow_transfer' => 'allowTransfer',
        'owner' => 'owner',
        'updater' => 'updater',
        'log_id' => 'logId',
        'comment' => 'comment',
        'domainsafe' => 'domainsafe',
        'source' => 'source',
        'source_virtual_hostname' => 'sourceVirtualHostname',
        'zone_grants_add' => 'zoneGrantsAdd',
        'zone_grants_rem' => 'zoneGrantsRem',
        'name_servers' => 'nameServers',
        'main' => 'main',
        'www_include' => 'wwwInclude',
        'virtual_name_server' => 'virtualNameServer',
        'free_text' => 'freeText',
        'action' => 'action',
        'grants' => 'grants',
        'resource_records' => 'resourceRecords',
        'roid' => 'roid',
        'resource_records_add' => 'resourceRecordsAdd',
        'resource_records_rem' => 'resourceRecordsRem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'origin' => 'setOrigin',
        'idn' => 'setIdn',
        'soa' => 'setSoa',
        'dnssec' => 'setDnssec',
        'name_server_group' => 'setNameServerGroup',
        'allow_transfer' => 'setAllowTransfer',
        'owner' => 'setOwner',
        'updater' => 'setUpdater',
        'log_id' => 'setLogId',
        'comment' => 'setComment',
        'domainsafe' => 'setDomainsafe',
        'source' => 'setSource',
        'source_virtual_hostname' => 'setSourceVirtualHostname',
        'zone_grants_add' => 'setZoneGrantsAdd',
        'zone_grants_rem' => 'setZoneGrantsRem',
        'name_servers' => 'setNameServers',
        'main' => 'setMain',
        'www_include' => 'setWwwInclude',
        'virtual_name_server' => 'setVirtualNameServer',
        'free_text' => 'setFreeText',
        'action' => 'setAction',
        'grants' => 'setGrants',
        'resource_records' => 'setResourceRecords',
        'roid' => 'setRoid',
        'resource_records_add' => 'setResourceRecordsAdd',
        'resource_records_rem' => 'setResourceRecordsRem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'origin' => 'getOrigin',
        'idn' => 'getIdn',
        'soa' => 'getSoa',
        'dnssec' => 'getDnssec',
        'name_server_group' => 'getNameServerGroup',
        'allow_transfer' => 'getAllowTransfer',
        'owner' => 'getOwner',
        'updater' => 'getUpdater',
        'log_id' => 'getLogId',
        'comment' => 'getComment',
        'domainsafe' => 'getDomainsafe',
        'source' => 'getSource',
        'source_virtual_hostname' => 'getSourceVirtualHostname',
        'zone_grants_add' => 'getZoneGrantsAdd',
        'zone_grants_rem' => 'getZoneGrantsRem',
        'name_servers' => 'getNameServers',
        'main' => 'getMain',
        'www_include' => 'getWwwInclude',
        'virtual_name_server' => 'getVirtualNameServer',
        'free_text' => 'getFreeText',
        'action' => 'getAction',
        'grants' => 'getGrants',
        'resource_records' => 'getResourceRecords',
        'roid' => 'getRoid',
        'resource_records_add' => 'getResourceRecordsAdd',
        'resource_records_rem' => 'getResourceRecordsRem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['idn'] = isset($data['idn']) ? $data['idn'] : null;
        $this->container['soa'] = isset($data['soa']) ? $data['soa'] : null;
        $this->container['dnssec'] = isset($data['dnssec']) ? $data['dnssec'] : null;
        $this->container['name_server_group'] = isset($data['name_server_group']) ? $data['name_server_group'] : null;
        $this->container['allow_transfer'] = isset($data['allow_transfer']) ? $data['allow_transfer'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['updater'] = isset($data['updater']) ? $data['updater'] : null;
        $this->container['log_id'] = isset($data['log_id']) ? $data['log_id'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['domainsafe'] = isset($data['domainsafe']) ? $data['domainsafe'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_virtual_hostname'] = isset($data['source_virtual_hostname']) ? $data['source_virtual_hostname'] : null;
        $this->container['zone_grants_add'] = isset($data['zone_grants_add']) ? $data['zone_grants_add'] : null;
        $this->container['zone_grants_rem'] = isset($data['zone_grants_rem']) ? $data['zone_grants_rem'] : null;
        $this->container['name_servers'] = isset($data['name_servers']) ? $data['name_servers'] : null;
        $this->container['main'] = isset($data['main']) ? $data['main'] : null;
        $this->container['www_include'] = isset($data['www_include']) ? $data['www_include'] : null;
        $this->container['virtual_name_server'] = isset($data['virtual_name_server']) ? $data['virtual_name_server'] : null;
        $this->container['free_text'] = isset($data['free_text']) ? $data['free_text'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['grants'] = isset($data['grants']) ? $data['grants'] : null;
        $this->container['resource_records'] = isset($data['resource_records']) ? $data['resource_records'] : null;
        $this->container['roid'] = isset($data['roid']) ? $data['roid'] : null;
        $this->container['resource_records_add'] = isset($data['resource_records_add']) ? $data['resource_records_add'] : null;
        $this->container['resource_records_rem'] = isset($data['resource_records_rem']) ? $data['resource_records_rem'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The created date.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The updated date.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin Zone name
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets idn
     *
     * @return string
     */
    public function getIdn()
    {
        return $this->container['idn'];
    }

    /**
     * Sets idn
     *
     * @param string $idn The idn version of the origin.
     *
     * @return $this
     */
    public function setIdn($idn)
    {
        $this->container['idn'] = $idn;

        return $this;
    }

    /**
     * Gets soa
     *
     * @return \Swagger\Client\Model\Soa
     */
    public function getSoa()
    {
        return $this->container['soa'];
    }

    /**
     * Sets soa
     *
     * @param \Swagger\Client\Model\Soa $soa Only for ns_action: \"primary\"  and \"complete\"
     *
     * @return $this
     */
    public function setSoa($soa)
    {
        $this->container['soa'] = $soa;

        return $this;
    }

    /**
     * Gets dnssec
     *
     * @return bool
     */
    public function getDnssec()
    {
        return $this->container['dnssec'];
    }

    /**
     * Sets dnssec
     *
     * @param bool $dnssec Enables dnssec
     *
     * @return $this
     */
    public function setDnssec($dnssec)
    {
        $this->container['dnssec'] = $dnssec;

        return $this;
    }

    /**
     * Gets name_server_group
     *
     * @return string
     */
    public function getNameServerGroup()
    {
        return $this->container['name_server_group'];
    }

    /**
     * Sets name_server_group
     *
     * @param string $name_server_group The name of the name server group, if the zone is managed by
     *
     * @return $this
     */
    public function setNameServerGroup($name_server_group)
    {
        $this->container['name_server_group'] = $name_server_group;

        return $this;
    }

    /**
     * Gets allow_transfer
     *
     * @return bool
     */
    public function getAllowTransfer()
    {
        return $this->container['allow_transfer'];
    }

    /**
     * Sets allow_transfer
     *
     * @param bool $allow_transfer Allow AXFR
     *
     * @return $this
     */
    public function setAllowTransfer($allow_transfer)
    {
        $this->container['allow_transfer'] = $allow_transfer;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Swagger\Client\Model\BasicUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Swagger\Client\Model\BasicUser $owner The owner of the object
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updater
     *
     * @return \Swagger\Client\Model\BasicUser
     */
    public function getUpdater()
    {
        return $this->container['updater'];
    }

    /**
     * Sets updater
     *
     * @param \Swagger\Client\Model\BasicUser $updater The updating user of the object
     *
     * @return $this
     */
    public function setUpdater($updater)
    {
        $this->container['updater'] = $updater;

        return $this;
    }

    /**
     * Gets log_id
     *
     * @return int
     */
    public function getLogId()
    {
        return $this->container['log_id'];
    }

    /**
     * Sets log_id
     *
     * @param int $log_id The id of the related log-entry.
     *
     * @return $this
     */
    public function setLogId($log_id)
    {
        $this->container['log_id'] = $log_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment A custom field. Can only be updated via PUT /zone/{name}/{nameserver}/_comment. Requires appropriate ACLs.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets domainsafe
     *
     * @return bool
     */
    public function getDomainsafe()
    {
        return $this->container['domainsafe'];
    }

    /**
     * Sets domainsafe
     *
     * @param bool $domainsafe true if the domain is represented in the domain safe
     *
     * @return $this
     */
    public function setDomainsafe($domainsafe)
    {
        $this->container['domainsafe'] = $domainsafe;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Nameserver, the zone is copied from via AXFR (for zone_import)
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_virtual_hostname
     *
     * @return string
     */
    public function getSourceVirtualHostname()
    {
        return $this->container['source_virtual_hostname'];
    }

    /**
     * Sets source_virtual_hostname
     *
     * @param string $source_virtual_hostname System name server to look up the zone to copy
     *
     * @return $this
     */
    public function setSourceVirtualHostname($source_virtual_hostname)
    {
        $this->container['source_virtual_hostname'] = $source_virtual_hostname;

        return $this;
    }

    /**
     * Gets zone_grants_add
     *
     * @return string[]
     */
    public function getZoneGrantsAdd()
    {
        return $this->container['zone_grants_add'];
    }

    /**
     * Sets zone_grants_add
     *
     * @param string[] $zone_grants_add Adds new zone garnts to the zone
     *
     * @return $this
     */
    public function setZoneGrantsAdd($zone_grants_add)
    {
        $this->container['zone_grants_add'] = $zone_grants_add;

        return $this;
    }

    /**
     * Gets zone_grants_rem
     *
     * @return string[]
     */
    public function getZoneGrantsRem()
    {
        return $this->container['zone_grants_rem'];
    }

    /**
     * Sets zone_grants_rem
     *
     * @param string[] $zone_grants_rem Removes the zone garnts if exists.
     *
     * @return $this
     */
    public function setZoneGrantsRem($zone_grants_rem)
    {
        $this->container['zone_grants_rem'] = $zone_grants_rem;

        return $this;
    }

    /**
     * Gets name_servers
     *
     * @return \Swagger\Client\Model\NameServer[]
     */
    public function getNameServers()
    {
        return $this->container['name_servers'];
    }

    /**
     * Sets name_servers
     *
     * @param \Swagger\Client\Model\NameServer[] $name_servers List of name servers
     *
     * @return $this
     */
    public function setNameServers($name_servers)
    {
        $this->container['name_servers'] = $name_servers;

        return $this;
    }

    /**
     * Gets main
     *
     * @return \Swagger\Client\Model\MainIp
     */
    public function getMain()
    {
        return $this->container['main'];
    }

    /**
     * Sets main
     *
     * @param \Swagger\Client\Model\MainIp $main IP address of the zone (A record)
     *
     * @return $this
     */
    public function setMain($main)
    {
        $this->container['main'] = $main;

        return $this;
    }

    /**
     * Gets www_include
     *
     * @return bool
     */
    public function getWwwInclude()
    {
        return $this->container['www_include'];
    }

    /**
     * Sets www_include
     *
     * @param bool $www_include Automatic generation of resource records \"www\"
     *
     * @return $this
     */
    public function setWwwInclude($www_include)
    {
        $this->container['www_include'] = $www_include;

        return $this;
    }

    /**
     * Gets virtual_name_server
     *
     * @return string
     */
    public function getVirtualNameServer()
    {
        return $this->container['virtual_name_server'];
    }

    /**
     * Sets virtual_name_server
     *
     * @param string $virtual_name_server The first nameserver managed by the system
     *
     * @return $this
     */
    public function setVirtualNameServer($virtual_name_server)
    {
        $this->container['virtual_name_server'] = $virtual_name_server;

        return $this;
    }

    /**
     * Gets free_text
     *
     * @return string[]
     */
    public function getFreeText()
    {
        return $this->container['free_text'];
    }

    /**
     * Sets free_text
     *
     * @param string[] $free_text The free text records.
     *
     * @return $this
     */
    public function setFreeText($free_text)
    {
        $this->container['free_text'] = $free_text;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \Swagger\Client\Model\NameserverActionConstants
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \Swagger\Client\Model\NameserverActionConstants $action Additional nameserver check is proceeded
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets grants
     *
     * @return string[]
     */
    public function getGrants()
    {
        return $this->container['grants'];
    }

    /**
     * Sets grants
     *
     * @param string[] $grants The grants where transfer (axfr) can be done from.
     *
     * @return $this
     */
    public function setGrants($grants)
    {
        $this->container['grants'] = $grants;

        return $this;
    }

    /**
     * Gets resource_records
     *
     * @return \Swagger\Client\Model\ResourceRecord[]
     */
    public function getResourceRecords()
    {
        return $this->container['resource_records'];
    }

    /**
     * Sets resource_records
     *
     * @param \Swagger\Client\Model\ResourceRecord[] $resource_records The resource records.
     *
     * @return $this
     */
    public function setResourceRecords($resource_records)
    {
        $this->container['resource_records'] = $resource_records;

        return $this;
    }

    /**
     * Gets roid
     *
     * @return int
     */
    public function getRoid()
    {
        return $this->container['roid'];
    }

    /**
     * Sets roid
     *
     * @param int $roid The resource object identifier of the zone
     *
     * @return $this
     */
    public function setRoid($roid)
    {
        $this->container['roid'] = $roid;

        return $this;
    }

    /**
     * Gets resource_records_add
     *
     * @return \Swagger\Client\Model\ResourceRecord[]
     */
    public function getResourceRecordsAdd()
    {
        return $this->container['resource_records_add'];
    }

    /**
     * Sets resource_records_add
     *
     * @param \Swagger\Client\Model\ResourceRecord[] $resource_records_add Adds new zone records to the extistings
     *
     * @return $this
     */
    public function setResourceRecordsAdd($resource_records_add)
    {
        $this->container['resource_records_add'] = $resource_records_add;

        return $this;
    }

    /**
     * Gets resource_records_rem
     *
     * @return \Swagger\Client\Model\ResourceRecord[]
     */
    public function getResourceRecordsRem()
    {
        return $this->container['resource_records_rem'];
    }

    /**
     * Sets resource_records_rem
     *
     * @param \Swagger\Client\Model\ResourceRecord[] $resource_records_rem Removes the zone records if exists.
     *
     * @return $this
     */
    public function setResourceRecordsRem($resource_records_rem)
    {
        $this->container['resource_records_rem'] = $resource_records_rem;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns all values
     * toArray(true) => returns only non empty values
     * toArray(true, ["key"]) => returns all non empty values and "key" even if empty
     * toArray(true, ["key:no_empty_value"]) => returns all non empty values and "key" if not empty
     */
    public function toArray($removeEmptyValues = false, $retrieveKeys = []){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!in_array($key, $retrieveKeys) && $removeEmptyValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            if(in_array($key.":no_empty_value", $retrieveKeys)){
                unset($container[$key]);
                continue;
            }
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
        };
        return $container;
    }
}


