<?php
/**
 * ContactAuExtensions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactAuExtensions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactAuExtensions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactAuExtensions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eligibility_id' => 'string',
        'eligibility_id_type' => '\Swagger\Client\Model\AuEligibilityIdTypeConstants',
        'eligibility_name' => 'string',
        'eligibility_type' => '\Swagger\Client\Model\AuEligibilityTypeConstants',
        'policy_reason' => 'int',
        'registrant_id' => 'string',
        'registrant_id_type' => '\Swagger\Client\Model\AuRegistrantIdTypeConstants',
        'registrant_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'eligibility_id' => null,
        'eligibility_id_type' => null,
        'eligibility_name' => null,
        'eligibility_type' => null,
        'policy_reason' => 'int32',
        'registrant_id' => null,
        'registrant_id_type' => null,
        'registrant_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eligibility_id' => 'eligibilityId',
        'eligibility_id_type' => 'eligibilityIdType',
        'eligibility_name' => 'eligibilityName',
        'eligibility_type' => 'eligibilityType',
        'policy_reason' => 'policyReason',
        'registrant_id' => 'registrantId',
        'registrant_id_type' => 'registrantIdType',
        'registrant_name' => 'registrantName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eligibility_id' => 'setEligibilityId',
        'eligibility_id_type' => 'setEligibilityIdType',
        'eligibility_name' => 'setEligibilityName',
        'eligibility_type' => 'setEligibilityType',
        'policy_reason' => 'setPolicyReason',
        'registrant_id' => 'setRegistrantId',
        'registrant_id_type' => 'setRegistrantIdType',
        'registrant_name' => 'setRegistrantName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eligibility_id' => 'getEligibilityId',
        'eligibility_id_type' => 'getEligibilityIdType',
        'eligibility_name' => 'getEligibilityName',
        'eligibility_type' => 'getEligibilityType',
        'policy_reason' => 'getPolicyReason',
        'registrant_id' => 'getRegistrantId',
        'registrant_id_type' => 'getRegistrantIdType',
        'registrant_name' => 'getRegistrantName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eligibility_id'] = isset($data['eligibility_id']) ? $data['eligibility_id'] : null;
        $this->container['eligibility_id_type'] = isset($data['eligibility_id_type']) ? $data['eligibility_id_type'] : null;
        $this->container['eligibility_name'] = isset($data['eligibility_name']) ? $data['eligibility_name'] : null;
        $this->container['eligibility_type'] = isset($data['eligibility_type']) ? $data['eligibility_type'] : null;
        $this->container['policy_reason'] = isset($data['policy_reason']) ? $data['policy_reason'] : null;
        $this->container['registrant_id'] = isset($data['registrant_id']) ? $data['registrant_id'] : null;
        $this->container['registrant_id_type'] = isset($data['registrant_id_type']) ? $data['registrant_id_type'] : null;
        $this->container['registrant_name'] = isset($data['registrant_name']) ? $data['registrant_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eligibility_id
     *
     * @return string
     */
    public function getEligibilityId()
    {
        return $this->container['eligibility_id'];
    }

    /**
     * Sets eligibility_id
     *
     * @param string $eligibility_id The corresponding ID number for the eligibility name if applicable, if in doubt just use the same details as your Registrant ID.
     *
     * @return $this
     */
    public function setEligibilityId($eligibility_id)
    {
        $this->container['eligibility_id'] = $eligibility_id;

        return $this;
    }

    /**
     * Gets eligibility_id_type
     *
     * @return \Swagger\Client\Model\AuEligibilityIdTypeConstants
     */
    public function getEligibilityIdType()
    {
        return $this->container['eligibility_id_type'];
    }

    /**
     * Sets eligibility_id_type
     *
     * @param \Swagger\Client\Model\AuEligibilityIdTypeConstants $eligibility_id_type The type of Eligibility ID.
     *
     * @return $this
     */
    public function setEligibilityIdType($eligibility_id_type)
    {
        $this->container['eligibility_id_type'] = $eligibility_id_type;

        return $this;
    }

    /**
     * Gets eligibility_name
     *
     * @return string
     */
    public function getEligibilityName()
    {
        return $this->container['eligibility_name'];
    }

    /**
     * Sets eligibility_name
     *
     * @param string $eligibility_name This field is usually optional and whether it is required is determined by your policy reason for the domain registration, if in doubt just use the same details as your Registrant Name.
     *
     * @return $this
     */
    public function setEligibilityName($eligibility_name)
    {
        $this->container['eligibility_name'] = $eligibility_name;

        return $this;
    }

    /**
     * Gets eligibility_type
     *
     * @return \Swagger\Client\Model\AuEligibilityTypeConstants
     */
    public function getEligibilityType()
    {
        return $this->container['eligibility_type'];
    }

    /**
     * Sets eligibility_type
     *
     * @param \Swagger\Client\Model\AuEligibilityTypeConstants $eligibility_type The type of entity that the registrant is.
     *
     * @return $this
     */
    public function setEligibilityType($eligibility_type)
    {
        $this->container['eligibility_type'] = $eligibility_type;

        return $this;
    }

    /**
     * Gets policy_reason
     *
     * @return int
     */
    public function getPolicyReason()
    {
        return $this->container['policy_reason'];
    }

    /**
     * Sets policy_reason
     *
     * @param int $policy_reason Reason for eligibility.
     *
     * @return $this
     */
    public function setPolicyReason($policy_reason)
    {
        $this->container['policy_reason'] = $policy_reason;

        return $this;
    }

    /**
     * Gets registrant_id
     *
     * @return string
     */
    public function getRegistrantId()
    {
        return $this->container['registrant_id'];
    }

    /**
     * Sets registrant_id
     *
     * @param string $registrant_id Australian Business Number or Registered Business Number.
     *
     * @return $this
     */
    public function setRegistrantId($registrant_id)
    {
        $this->container['registrant_id'] = $registrant_id;

        return $this;
    }

    /**
     * Gets registrant_id_type
     *
     * @return \Swagger\Client\Model\AuRegistrantIdTypeConstants
     */
    public function getRegistrantIdType()
    {
        return $this->container['registrant_id_type'];
    }

    /**
     * Sets registrant_id_type
     *
     * @param \Swagger\Client\Model\AuRegistrantIdTypeConstants $registrant_id_type Concerns the Registrant ID which you have selected in the Registrant ID form field.
     *
     * @return $this
     */
    public function setRegistrantIdType($registrant_id_type)
    {
        $this->container['registrant_id_type'] = $registrant_id_type;

        return $this;
    }

    /**
     * Gets registrant_name
     *
     * @return string
     */
    public function getRegistrantName()
    {
        return $this->container['registrant_name'];
    }

    /**
     * Sets registrant_name
     *
     * @param string $registrant_name The registrants name.
     *
     * @return $this
     */
    public function setRegistrantName($registrant_name)
    {
        $this->container['registrant_name'] = $registrant_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns all values
     * toArray(true) => returns only non empty values
     * toArray(true, ["key"]) => returns all non empty values and "key" even if empty
     * toArray(true, ["key:no_empty_value"]) => returns all non empty values and "key" if not empty
     */
    public function toArray($removeEmptyValues = false, $retrieveKeys = []){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!in_array($key, $retrieveKeys) && $removeEmptyValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            if(in_array($key.":no_empty_value", $retrieveKeys)){
                unset($container[$key]);
                continue;
            }
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
        };
        return $container;
    }
}


