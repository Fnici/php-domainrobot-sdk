<?php
/**
 * Transfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transfer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'owner' => '\Swagger\Client\Model\BasicUser',
        'updater' => '\Swagger\Client\Model\BasicUser',
        'domain' => 'string',
        'gaining_registrar' => 'string',
        'loosing_registrar' => 'string',
        'start' => '\DateTime',
        'reminder' => '\DateTime',
        'auto_ack' => '\DateTime',
        'auto_nack' => '\DateTime',
        'end' => '\DateTime',
        'auto_answer' => 'bool',
        'recipient' => 'string',
        'mailserver' => 'string',
        'delivered_mailserver' => 'string',
        'delivered' => '\DateTime',
        'status' => '\Swagger\Client\Model\TransferStatusConstants'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'owner' => null,
        'updater' => null,
        'domain' => null,
        'gaining_registrar' => null,
        'loosing_registrar' => null,
        'start' => 'date-time',
        'reminder' => 'date-time',
        'auto_ack' => 'date-time',
        'auto_nack' => 'date-time',
        'end' => 'date-time',
        'auto_answer' => null,
        'recipient' => null,
        'mailserver' => null,
        'delivered_mailserver' => null,
        'delivered' => 'date-time',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'owner' => 'owner',
        'updater' => 'updater',
        'domain' => 'domain',
        'gaining_registrar' => 'gainingRegistrar',
        'loosing_registrar' => 'loosingRegistrar',
        'start' => 'start',
        'reminder' => 'reminder',
        'auto_ack' => 'autoAck',
        'auto_nack' => 'autoNack',
        'end' => 'end',
        'auto_answer' => 'autoAnswer',
        'recipient' => 'recipient',
        'mailserver' => 'mailserver',
        'delivered_mailserver' => 'deliveredMailserver',
        'delivered' => 'delivered',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'owner' => 'setOwner',
        'updater' => 'setUpdater',
        'domain' => 'setDomain',
        'gaining_registrar' => 'setGainingRegistrar',
        'loosing_registrar' => 'setLoosingRegistrar',
        'start' => 'setStart',
        'reminder' => 'setReminder',
        'auto_ack' => 'setAutoAck',
        'auto_nack' => 'setAutoNack',
        'end' => 'setEnd',
        'auto_answer' => 'setAutoAnswer',
        'recipient' => 'setRecipient',
        'mailserver' => 'setMailserver',
        'delivered_mailserver' => 'setDeliveredMailserver',
        'delivered' => 'setDelivered',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'owner' => 'getOwner',
        'updater' => 'getUpdater',
        'domain' => 'getDomain',
        'gaining_registrar' => 'getGainingRegistrar',
        'loosing_registrar' => 'getLoosingRegistrar',
        'start' => 'getStart',
        'reminder' => 'getReminder',
        'auto_ack' => 'getAutoAck',
        'auto_nack' => 'getAutoNack',
        'end' => 'getEnd',
        'auto_answer' => 'getAutoAnswer',
        'recipient' => 'getRecipient',
        'mailserver' => 'getMailserver',
        'delivered_mailserver' => 'getDeliveredMailserver',
        'delivered' => 'getDelivered',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['updater'] = isset($data['updater']) ? $data['updater'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['gaining_registrar'] = isset($data['gaining_registrar']) ? $data['gaining_registrar'] : null;
        $this->container['loosing_registrar'] = isset($data['loosing_registrar']) ? $data['loosing_registrar'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['auto_ack'] = isset($data['auto_ack']) ? $data['auto_ack'] : null;
        $this->container['auto_nack'] = isset($data['auto_nack']) ? $data['auto_nack'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['auto_answer'] = isset($data['auto_answer']) ? $data['auto_answer'] : null;
        $this->container['recipient'] = isset($data['recipient']) ? $data['recipient'] : null;
        $this->container['mailserver'] = isset($data['mailserver']) ? $data['mailserver'] : null;
        $this->container['delivered_mailserver'] = isset($data['delivered_mailserver']) ? $data['delivered_mailserver'] : null;
        $this->container['delivered'] = isset($data['delivered']) ? $data['delivered'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The created date.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The updated date.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Swagger\Client\Model\BasicUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Swagger\Client\Model\BasicUser $owner The owner of the object.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updater
     *
     * @return \Swagger\Client\Model\BasicUser
     */
    public function getUpdater()
    {
        return $this->container['updater'];
    }

    /**
     * Sets updater
     *
     * @param \Swagger\Client\Model\BasicUser $updater The updating user of the object.
     *
     * @return $this
     */
    public function setUpdater($updater)
    {
        $this->container['updater'] = $updater;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain The domain name.
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets gaining_registrar
     *
     * @return string
     */
    public function getGainingRegistrar()
    {
        return $this->container['gaining_registrar'];
    }

    /**
     * Sets gaining_registrar
     *
     * @param string $gaining_registrar The gaining registrar.
     *
     * @return $this
     */
    public function setGainingRegistrar($gaining_registrar)
    {
        $this->container['gaining_registrar'] = $gaining_registrar;

        return $this;
    }

    /**
     * Gets loosing_registrar
     *
     * @return string
     */
    public function getLoosingRegistrar()
    {
        return $this->container['loosing_registrar'];
    }

    /**
     * Sets loosing_registrar
     *
     * @param string $loosing_registrar The loosing registrar.
     *
     * @return $this
     */
    public function setLoosingRegistrar($loosing_registrar)
    {
        $this->container['loosing_registrar'] = $loosing_registrar;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start The start date.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return \DateTime
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param \DateTime $reminder The reminder date.
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets auto_ack
     *
     * @return \DateTime
     */
    public function getAutoAck()
    {
        return $this->container['auto_ack'];
    }

    /**
     * Sets auto_ack
     *
     * @param \DateTime $auto_ack The auto ack date.
     *
     * @return $this
     */
    public function setAutoAck($auto_ack)
    {
        $this->container['auto_ack'] = $auto_ack;

        return $this;
    }

    /**
     * Gets auto_nack
     *
     * @return \DateTime
     */
    public function getAutoNack()
    {
        return $this->container['auto_nack'];
    }

    /**
     * Sets auto_nack
     *
     * @param \DateTime $auto_nack The auto nack date.
     *
     * @return $this
     */
    public function setAutoNack($auto_nack)
    {
        $this->container['auto_nack'] = $auto_nack;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end The end date.
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets auto_answer
     *
     * @return bool
     */
    public function getAutoAnswer()
    {
        return $this->container['auto_answer'];
    }

    /**
     * Sets auto_answer
     *
     * @param bool $auto_answer Autoanswer active.
     *
     * @return $this
     */
    public function setAutoAnswer($auto_answer)
    {
        $this->container['auto_answer'] = $auto_answer;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient The recipient.
     *
     * @return $this
     */
    public function setRecipient($recipient)
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets mailserver
     *
     * @return string
     */
    public function getMailserver()
    {
        return $this->container['mailserver'];
    }

    /**
     * Sets mailserver
     *
     * @param string $mailserver The mailserver.
     *
     * @return $this
     */
    public function setMailserver($mailserver)
    {
        $this->container['mailserver'] = $mailserver;

        return $this;
    }

    /**
     * Gets delivered_mailserver
     *
     * @return string
     */
    public function getDeliveredMailserver()
    {
        return $this->container['delivered_mailserver'];
    }

    /**
     * Sets delivered_mailserver
     *
     * @param string $delivered_mailserver The delivered mailserver.
     *
     * @return $this
     */
    public function setDeliveredMailserver($delivered_mailserver)
    {
        $this->container['delivered_mailserver'] = $delivered_mailserver;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return \DateTime
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param \DateTime $delivered The delivered date.
     *
     * @return $this
     */
    public function setDelivered($delivered)
    {
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\TransferStatusConstants
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\TransferStatusConstants $status The transfer status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns all values
     * toArray(true) => returns only non empty values
     * toArray(true, ["key"]) => returns all non empty values and "key" even if empty
     * toArray(true, ["key:no_empty_value"]) => returns all non empty values and "key" if not empty
     */
    public function toArray($removeEmptyValues = false, $retrieveKeys = []){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!in_array($key, $retrieveKeys) && $removeEmptyValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            if(in_array($key.":no_empty_value", $retrieveKeys)){
                unset($container[$key]);
                continue;
            }
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
        };
        return $container;
    }
}


