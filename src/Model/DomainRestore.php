<?php
/**
 * DomainRestore
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * DomainRestore Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainRestore implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainRestore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'owner' => '\Domainrobot\Model\BasicUser',
        'updater' => '\Domainrobot\Model\BasicUser',
        'name' => 'string',
        'idn' => 'string',
        'nicMemberLabel' => 'string',
        'registryStatus' => '\Domainrobot\Model\RegistryStatusConstants',
        'nameServers' => '\Domainrobot\Model\NameServer[]',
        'nameServerEntries' => 'string[]',
        'period' => '\Domainrobot\Model\TimePeriod',
        'trustee' => 'bool',
        'privacy' => 'bool',
        'authinfo' => 'string',
        'domainsafe' => 'bool',
        'parking' => '\Domainrobot\Model\ParkingProviderConstants',
        'extensions' => '\Domainrobot\Model\DomainExtensions',
        'logId' => 'int',
        'nsCheck' => '\Domainrobot\Model\DNSCheck',
        'confirmOrder' => 'bool',
        'confirmOwnerConsent' => 'bool',
        'ignoreWhois' => 'bool',
        'comment' => 'string',
        'includeWWW' => 'bool',
        'includeWildcard' => 'bool',
        'registrarStatus' => '\Domainrobot\Model\RegistryStatusConstants',
        'registrarStatusReason' => 'string',
        'removeCancelation' => 'bool',
        'autodnsSecJob' => '\Domainrobot\Model\DNSSecJob',
        'priceClass' => 'string',
        'priceClassRenew' => 'string',
        'abuseEmail' => 'string',
        'generalRequestEmail' => 'string',
        'privacyPlusMail' => 'string',
        'privacyPlus' => 'bool',
        'nameServerGroup' => 'string',
        'rddsOptIn' => '\Domainrobot\Model\RddsOptInConstants',
        'servicesAdd' => '\Domainrobot\Model\DomainServices',
        'servicesRem' => '\Domainrobot\Model\DomainServices',
        'deleted' => '\DateTime',
        'restorePhaseEnd' => '\DateTime',
        'ownerc' => '\Domainrobot\Model\Contact',
        'adminc' => '\Domainrobot\Model\Contact',
        'techc' => '\Domainrobot\Model\Contact',
        'zonec' => '\Domainrobot\Model\Contact',
        'expire' => '\DateTime',
        'payable' => '\DateTime',
        'action' => '\Domainrobot\Model\DomainActionConstants',
        'autoDnssec' => 'bool',
        'dnssec' => 'bool',
        'validCertificate' => 'bool',
        'cancelationStatus' => '\Domainrobot\Model\CancelationStatusConstants',
        'autoRenewStatus' => '\Domainrobot\Model\AutoRenewStatusConstants',
        'dnssecData' => '\Domainrobot\Model\DNSSec[]',
        'zone' => '\Domainrobot\Model\Zone'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'owner' => null,
        'updater' => null,
        'name' => null,
        'idn' => null,
        'nicMemberLabel' => null,
        'registryStatus' => null,
        'nameServers' => null,
        'nameServerEntries' => null,
        'period' => null,
        'trustee' => null,
        'privacy' => null,
        'authinfo' => null,
        'domainsafe' => null,
        'parking' => null,
        'extensions' => null,
        'logId' => 'int64',
        'nsCheck' => null,
        'confirmOrder' => null,
        'confirmOwnerConsent' => null,
        'ignoreWhois' => null,
        'comment' => null,
        'includeWWW' => null,
        'includeWildcard' => null,
        'registrarStatus' => null,
        'registrarStatusReason' => null,
        'removeCancelation' => null,
        'autodnsSecJob' => null,
        'priceClass' => null,
        'priceClassRenew' => null,
        'abuseEmail' => null,
        'generalRequestEmail' => null,
        'privacyPlusMail' => null,
        'privacyPlus' => null,
        'nameServerGroup' => null,
        'rddsOptIn' => null,
        'servicesAdd' => null,
        'servicesRem' => null,
        'deleted' => 'date-time',
        'restorePhaseEnd' => 'date-time',
        'ownerc' => null,
        'adminc' => null,
        'techc' => null,
        'zonec' => null,
        'expire' => 'date-time',
        'payable' => 'date-time',
        'action' => null,
        'autoDnssec' => null,
        'dnssec' => null,
        'validCertificate' => null,
        'cancelationStatus' => null,
        'autoRenewStatus' => null,
        'dnssecData' => null,
        'zone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'owner' => 'owner',
        'updater' => 'updater',
        'name' => 'name',
        'idn' => 'idn',
        'nicMemberLabel' => 'nicMemberLabel',
        'registryStatus' => 'registryStatus',
        'nameServers' => 'nameServers',
        'nameServerEntries' => 'nameServerEntries',
        'period' => 'period',
        'trustee' => 'trustee',
        'privacy' => 'privacy',
        'authinfo' => 'authinfo',
        'domainsafe' => 'domainsafe',
        'parking' => 'parking',
        'extensions' => 'extensions',
        'logId' => 'logId',
        'nsCheck' => 'nsCheck',
        'confirmOrder' => 'confirmOrder',
        'confirmOwnerConsent' => 'confirmOwnerConsent',
        'ignoreWhois' => 'ignoreWhois',
        'comment' => 'comment',
        'includeWWW' => 'includeWWW',
        'includeWildcard' => 'includeWildcard',
        'registrarStatus' => 'registrarStatus',
        'registrarStatusReason' => 'registrarStatusReason',
        'removeCancelation' => 'removeCancelation',
        'autodnsSecJob' => 'autodnsSecJob',
        'priceClass' => 'priceClass',
        'priceClassRenew' => 'priceClassRenew',
        'abuseEmail' => 'abuseEmail',
        'generalRequestEmail' => 'generalRequestEmail',
        'privacyPlusMail' => 'privacyPlusMail',
        'privacyPlus' => 'privacyPlus',
        'nameServerGroup' => 'nameServerGroup',
        'rddsOptIn' => 'rddsOptIn',
        'servicesAdd' => 'servicesAdd',
        'servicesRem' => 'servicesRem',
        'deleted' => 'deleted',
        'restorePhaseEnd' => 'restorePhaseEnd',
        'ownerc' => 'ownerc',
        'adminc' => 'adminc',
        'techc' => 'techc',
        'zonec' => 'zonec',
        'expire' => 'expire',
        'payable' => 'payable',
        'action' => 'action',
        'autoDnssec' => 'autoDnssec',
        'dnssec' => 'dnssec',
        'validCertificate' => 'validCertificate',
        'cancelationStatus' => 'cancelationStatus',
        'autoRenewStatus' => 'autoRenewStatus',
        'dnssecData' => 'dnssecData',
        'zone' => 'zone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'owner' => 'setOwner',
        'updater' => 'setUpdater',
        'name' => 'setName',
        'idn' => 'setIdn',
        'nicMemberLabel' => 'setNicMemberLabel',
        'registryStatus' => 'setRegistryStatus',
        'nameServers' => 'setNameServers',
        'nameServerEntries' => 'setNameServerEntries',
        'period' => 'setPeriod',
        'trustee' => 'setTrustee',
        'privacy' => 'setPrivacy',
        'authinfo' => 'setAuthinfo',
        'domainsafe' => 'setDomainsafe',
        'parking' => 'setParking',
        'extensions' => 'setExtensions',
        'logId' => 'setLogId',
        'nsCheck' => 'setNsCheck',
        'confirmOrder' => 'setConfirmOrder',
        'confirmOwnerConsent' => 'setConfirmOwnerConsent',
        'ignoreWhois' => 'setIgnoreWhois',
        'comment' => 'setComment',
        'includeWWW' => 'setIncludeWWW',
        'includeWildcard' => 'setIncludeWildcard',
        'registrarStatus' => 'setRegistrarStatus',
        'registrarStatusReason' => 'setRegistrarStatusReason',
        'removeCancelation' => 'setRemoveCancelation',
        'autodnsSecJob' => 'setAutodnsSecJob',
        'priceClass' => 'setPriceClass',
        'priceClassRenew' => 'setPriceClassRenew',
        'abuseEmail' => 'setAbuseEmail',
        'generalRequestEmail' => 'setGeneralRequestEmail',
        'privacyPlusMail' => 'setPrivacyPlusMail',
        'privacyPlus' => 'setPrivacyPlus',
        'nameServerGroup' => 'setNameServerGroup',
        'rddsOptIn' => 'setRddsOptIn',
        'servicesAdd' => 'setServicesAdd',
        'servicesRem' => 'setServicesRem',
        'deleted' => 'setDeleted',
        'restorePhaseEnd' => 'setRestorePhaseEnd',
        'ownerc' => 'setOwnerc',
        'adminc' => 'setAdminc',
        'techc' => 'setTechc',
        'zonec' => 'setZonec',
        'expire' => 'setExpire',
        'payable' => 'setPayable',
        'action' => 'setAction',
        'autoDnssec' => 'setAutoDnssec',
        'dnssec' => 'setDnssec',
        'validCertificate' => 'setValidCertificate',
        'cancelationStatus' => 'setCancelationStatus',
        'autoRenewStatus' => 'setAutoRenewStatus',
        'dnssecData' => 'setDnssecData',
        'zone' => 'setZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'owner' => 'getOwner',
        'updater' => 'getUpdater',
        'name' => 'getName',
        'idn' => 'getIdn',
        'nicMemberLabel' => 'getNicMemberLabel',
        'registryStatus' => 'getRegistryStatus',
        'nameServers' => 'getNameServers',
        'nameServerEntries' => 'getNameServerEntries',
        'period' => 'getPeriod',
        'trustee' => 'getTrustee',
        'privacy' => 'getPrivacy',
        'authinfo' => 'getAuthinfo',
        'domainsafe' => 'getDomainsafe',
        'parking' => 'getParking',
        'extensions' => 'getExtensions',
        'logId' => 'getLogId',
        'nsCheck' => 'getNsCheck',
        'confirmOrder' => 'getConfirmOrder',
        'confirmOwnerConsent' => 'getConfirmOwnerConsent',
        'ignoreWhois' => 'getIgnoreWhois',
        'comment' => 'getComment',
        'includeWWW' => 'getIncludeWWW',
        'includeWildcard' => 'getIncludeWildcard',
        'registrarStatus' => 'getRegistrarStatus',
        'registrarStatusReason' => 'getRegistrarStatusReason',
        'removeCancelation' => 'getRemoveCancelation',
        'autodnsSecJob' => 'getAutodnsSecJob',
        'priceClass' => 'getPriceClass',
        'priceClassRenew' => 'getPriceClassRenew',
        'abuseEmail' => 'getAbuseEmail',
        'generalRequestEmail' => 'getGeneralRequestEmail',
        'privacyPlusMail' => 'getPrivacyPlusMail',
        'privacyPlus' => 'getPrivacyPlus',
        'nameServerGroup' => 'getNameServerGroup',
        'rddsOptIn' => 'getRddsOptIn',
        'servicesAdd' => 'getServicesAdd',
        'servicesRem' => 'getServicesRem',
        'deleted' => 'getDeleted',
        'restorePhaseEnd' => 'getRestorePhaseEnd',
        'ownerc' => 'getOwnerc',
        'adminc' => 'getAdminc',
        'techc' => 'getTechc',
        'zonec' => 'getZonec',
        'expire' => 'getExpire',
        'payable' => 'getPayable',
        'action' => 'getAction',
        'autoDnssec' => 'getAutoDnssec',
        'dnssec' => 'getDnssec',
        'validCertificate' => 'getValidCertificate',
        'cancelationStatus' => 'getCancelationStatus',
        'autoRenewStatus' => 'getAutoRenewStatus',
        'dnssecData' => 'getDnssecData',
        'zone' => 'getZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['updater'] = isset($data['updater']) ? $data['updater'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['idn'] = isset($data['idn']) ? $data['idn'] : null;
        $this->container['nicMemberLabel'] = isset($data['nicMemberLabel']) ? $data['nicMemberLabel'] : null;
        $this->container['registryStatus'] = isset($data['registryStatus']) ? $data['registryStatus'] : null;
        $this->container['nameServers'] = isset($data['nameServers']) ? $data['nameServers'] : null;
        $this->container['nameServerEntries'] = isset($data['nameServerEntries']) ? $data['nameServerEntries'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['trustee'] = isset($data['trustee']) ? $data['trustee'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['authinfo'] = isset($data['authinfo']) ? $data['authinfo'] : null;
        $this->container['domainsafe'] = isset($data['domainsafe']) ? $data['domainsafe'] : null;
        $this->container['parking'] = isset($data['parking']) ? $data['parking'] : null;
        $this->container['extensions'] = isset($data['extensions']) ? $data['extensions'] : null;
        $this->container['logId'] = isset($data['logId']) ? $data['logId'] : null;
        $this->container['nsCheck'] = isset($data['nsCheck']) ? $data['nsCheck'] : null;
        $this->container['confirmOrder'] = isset($data['confirmOrder']) ? $data['confirmOrder'] : null;
        $this->container['confirmOwnerConsent'] = isset($data['confirmOwnerConsent']) ? $data['confirmOwnerConsent'] : null;
        $this->container['ignoreWhois'] = isset($data['ignoreWhois']) ? $data['ignoreWhois'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['includeWWW'] = isset($data['includeWWW']) ? $data['includeWWW'] : null;
        $this->container['includeWildcard'] = isset($data['includeWildcard']) ? $data['includeWildcard'] : null;
        $this->container['registrarStatus'] = isset($data['registrarStatus']) ? $data['registrarStatus'] : null;
        $this->container['registrarStatusReason'] = isset($data['registrarStatusReason']) ? $data['registrarStatusReason'] : null;
        $this->container['removeCancelation'] = isset($data['removeCancelation']) ? $data['removeCancelation'] : null;
        $this->container['autodnsSecJob'] = isset($data['autodnsSecJob']) ? $data['autodnsSecJob'] : null;
        $this->container['priceClass'] = isset($data['priceClass']) ? $data['priceClass'] : null;
        $this->container['priceClassRenew'] = isset($data['priceClassRenew']) ? $data['priceClassRenew'] : null;
        $this->container['abuseEmail'] = isset($data['abuseEmail']) ? $data['abuseEmail'] : null;
        $this->container['generalRequestEmail'] = isset($data['generalRequestEmail']) ? $data['generalRequestEmail'] : null;
        $this->container['privacyPlusMail'] = isset($data['privacyPlusMail']) ? $data['privacyPlusMail'] : null;
        $this->container['privacyPlus'] = isset($data['privacyPlus']) ? $data['privacyPlus'] : null;
        $this->container['nameServerGroup'] = isset($data['nameServerGroup']) ? $data['nameServerGroup'] : null;
        $this->container['rddsOptIn'] = isset($data['rddsOptIn']) ? $data['rddsOptIn'] : null;
        $this->container['servicesAdd'] = isset($data['servicesAdd']) ? $data['servicesAdd'] : null;
        $this->container['servicesRem'] = isset($data['servicesRem']) ? $data['servicesRem'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['restorePhaseEnd'] = isset($data['restorePhaseEnd']) ? $data['restorePhaseEnd'] : null;
        $this->container['ownerc'] = isset($data['ownerc']) ? $data['ownerc'] : null;
        $this->container['adminc'] = isset($data['adminc']) ? $data['adminc'] : null;
        $this->container['techc'] = isset($data['techc']) ? $data['techc'] : null;
        $this->container['zonec'] = isset($data['zonec']) ? $data['zonec'] : null;
        $this->container['expire'] = isset($data['expire']) ? $data['expire'] : null;
        $this->container['payable'] = isset($data['payable']) ? $data['payable'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['autoDnssec'] = isset($data['autoDnssec']) ? $data['autoDnssec'] : null;
        $this->container['dnssec'] = isset($data['dnssec']) ? $data['dnssec'] : null;
        $this->container['validCertificate'] = isset($data['validCertificate']) ? $data['validCertificate'] : null;
        $this->container['cancelationStatus'] = isset($data['cancelationStatus']) ? $data['cancelationStatus'] : null;
        $this->container['autoRenewStatus'] = isset($data['autoRenewStatus']) ? $data['autoRenewStatus'] : null;
        $this->container['dnssecData'] = isset($data['dnssecData']) ? $data['dnssecData'] : null;
        $this->container['zone'] = isset($data['zone']) ? $data['zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['removeCancelation'] === null) {
            $invalidProperties[] = "'removeCancelation' can't be null";
        }
        if ($this->container['payable'] === null) {
            $invalidProperties[] = "'payable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The created date.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The updated date.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Domainrobot\Model\BasicUser $owner The owner of the object.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updater
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getUpdater()
    {
        return $this->container['updater'];
    }

    /**
     * Sets updater
     *
     * @param \Domainrobot\Model\BasicUser $updater The updater of the object.
     *
     * @return $this
     */
    public function setUpdater($updater)
    {
        $this->container['updater'] = $updater;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the domain.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets idn
     *
     * @return string
     */
    public function getIdn()
    {
        return $this->container['idn'];
    }

    /**
     * Sets idn
     *
     * @param string $idn The unicode domain name
     *
     * @return $this
     */
    public function setIdn($idn)
    {
        $this->container['idn'] = $idn;

        return $this;
    }

    /**
     * Gets nicMemberLabel
     *
     * @return string
     */
    public function getNicMemberLabel()
    {
        return $this->container['nicMemberLabel'];
    }

    /**
     * Sets nicMemberLabel
     *
     * @param string $nicMemberLabel The nic member label.
     *
     * @return $this
     */
    public function setNicMemberLabel($nicMemberLabel)
    {
        $this->container['nicMemberLabel'] = $nicMemberLabel;

        return $this;
    }

    /**
     * Gets registryStatus
     *
     * @return \Domainrobot\Model\RegistryStatusConstants
     */
    public function getRegistryStatus()
    {
        return $this->container['registryStatus'];
    }

    /**
     * Sets registryStatus
     *
     * @param \Domainrobot\Model\RegistryStatusConstants $registryStatus The registry status.
     *
     * @return $this
     */
    public function setRegistryStatus($registryStatus)
    {
        $this->container['registryStatus'] = $registryStatus;

        return $this;
    }

    /**
     * Gets nameServers
     *
     * @return \Domainrobot\Model\NameServer[]
     */
    public function getNameServers()
    {
        return $this->container['nameServers'];
    }

    /**
     * Sets nameServers
     *
     * @param \Domainrobot\Model\NameServer[] $nameServers The nameservers.
     *
     * @return $this
     */
    public function setNameServers($nameServers)
    {
        $this->container['nameServers'] = $nameServers;

        return $this;
    }

    /**
     * Gets nameServerEntries
     *
     * @return string[]
     */
    public function getNameServerEntries()
    {
        return $this->container['nameServerEntries'];
    }

    /**
     * Sets nameServerEntries
     *
     * @param string[] $nameServerEntries NSentry is only be provided for .DE. If NSentry is used, nameServers is not allowed.
     *
     * @return $this
     */
    public function setNameServerEntries($nameServerEntries)
    {
        $this->container['nameServerEntries'] = $nameServerEntries;

        return $this;
    }

    /**
     * Gets period
     *
     * @return \Domainrobot\Model\TimePeriod
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \Domainrobot\Model\TimePeriod $period The renew period in years.
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets trustee
     *
     * @return bool
     */
    public function getTrustee()
    {
        return $this->container['trustee'];
    }

    /**
     * Sets trustee
     *
     * @param bool $trustee Enable trustee service for the domain.
     *
     * @return $this
     */
    public function setTrustee($trustee)
    {
        $this->container['trustee'] = $trustee;

        return $this;
    }

    /**
     * Gets privacy
     *
     * @return bool
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     *
     * @param bool $privacy Enable privacy service for the domain.
     *
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets authinfo
     *
     * @return string
     */
    public function getAuthinfo()
    {
        return $this->container['authinfo'];
    }

    /**
     * Sets authinfo
     *
     * @param string $authinfo The authinfo.
     *
     * @return $this
     */
    public function setAuthinfo($authinfo)
    {
        $this->container['authinfo'] = $authinfo;

        return $this;
    }

    /**
     * Gets domainsafe
     *
     * @return bool
     */
    public function getDomainsafe()
    {
        return $this->container['domainsafe'];
    }

    /**
     * Sets domainsafe
     *
     * @param bool $domainsafe Enable domainsafe.
     *
     * @return $this
     */
    public function setDomainsafe($domainsafe)
    {
        $this->container['domainsafe'] = $domainsafe;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return \Domainrobot\Model\ParkingProviderConstants
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param \Domainrobot\Model\ParkingProviderConstants $parking The parking provider.
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets extensions
     *
     * @return \Domainrobot\Model\DomainExtensions
     */
    public function getExtensions()
    {
        return $this->container['extensions'];
    }

    /**
     * Sets extensions
     *
     * @param \Domainrobot\Model\DomainExtensions $extensions The domain extensions.
     *
     * @return $this
     */
    public function setExtensions($extensions)
    {
        $this->container['extensions'] = $extensions;

        return $this;
    }

    /**
     * Gets logId
     *
     * @return int
     */
    public function getLogId()
    {
        return $this->container['logId'];
    }

    /**
     * Sets logId
     *
     * @param int $logId The logId
     *
     * @return $this
     */
    public function setLogId($logId)
    {
        $this->container['logId'] = $logId;

        return $this;
    }

    /**
     * Gets nsCheck
     *
     * @return \Domainrobot\Model\DNSCheck
     */
    public function getNsCheck()
    {
        return $this->container['nsCheck'];
    }

    /**
     * Sets nsCheck
     *
     * @param \Domainrobot\Model\DNSCheck $nsCheck An additional nameserver check will be carried out.
     *
     * @return $this
     */
    public function setNsCheck($nsCheck)
    {
        $this->container['nsCheck'] = $nsCheck;

        return $this;
    }

    /**
     * Gets confirmOrder
     *
     * @return bool
     */
    public function getConfirmOrder()
    {
        return $this->container['confirmOrder'];
    }

    /**
     * Sets confirmOrder
     *
     * @param bool $confirmOrder Some TLDs require a confirmation of the “Terms and Conditions of Registration.
     *
     * @return $this
     */
    public function setConfirmOrder($confirmOrder)
    {
        $this->container['confirmOrder'] = $confirmOrder;

        return $this;
    }

    /**
     * Gets confirmOwnerConsent
     *
     * @return bool
     */
    public function getConfirmOwnerConsent()
    {
        return $this->container['confirmOwnerConsent'];
    }

    /**
     * Sets confirmOwnerConsent
     *
     * @param bool $confirmOwnerConsent Confirms the consent of the domainowner for the changes. Required for gTLDs and new gTLDs when changing the name, the email address or the organization of the domain owner.
     *
     * @return $this
     */
    public function setConfirmOwnerConsent($confirmOwnerConsent)
    {
        $this->container['confirmOwnerConsent'] = $confirmOwnerConsent;

        return $this;
    }

    /**
     * Gets ignoreWhois
     *
     * @return bool
     */
    public function getIgnoreWhois()
    {
        return $this->container['ignoreWhois'];
    }

    /**
     * Sets ignoreWhois
     *
     * @param bool $ignoreWhois Ignore whois.
     *
     * @return $this
     */
    public function setIgnoreWhois($ignoreWhois)
    {
        $this->container['ignoreWhois'] = $ignoreWhois;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment A custom field. Can only be updated via PUT /domain/{name}/_comment. Requires appropriate ACLs.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets includeWWW
     *
     * @return bool
     */
    public function getIncludeWWW()
    {
        return $this->container['includeWWW'];
    }

    /**
     * Sets includeWWW
     *
     * @param bool $includeWWW Enable utomatic creation of the www subdomain.
     *
     * @return $this
     */
    public function setIncludeWWW($includeWWW)
    {
        $this->container['includeWWW'] = $includeWWW;

        return $this;
    }

    /**
     * Gets includeWildcard
     *
     * @return bool
     */
    public function getIncludeWildcard()
    {
        return $this->container['includeWildcard'];
    }

    /**
     * Sets includeWildcard
     *
     * @param bool $includeWildcard Enable include wildcard.
     *
     * @return $this
     */
    public function setIncludeWildcard($includeWildcard)
    {
        $this->container['includeWildcard'] = $includeWildcard;

        return $this;
    }

    /**
     * Gets registrarStatus
     *
     * @return \Domainrobot\Model\RegistryStatusConstants
     */
    public function getRegistrarStatus()
    {
        return $this->container['registrarStatus'];
    }

    /**
     * Sets registrarStatus
     *
     * @param \Domainrobot\Model\RegistryStatusConstants $registrarStatus The registrar status.
     *
     * @return $this
     */
    public function setRegistrarStatus($registrarStatus)
    {
        $this->container['registrarStatus'] = $registrarStatus;

        return $this;
    }

    /**
     * Gets registrarStatusReason
     *
     * @return string
     */
    public function getRegistrarStatusReason()
    {
        return $this->container['registrarStatusReason'];
    }

    /**
     * Sets registrarStatusReason
     *
     * @param string $registrarStatusReason The registrar status reason.
     *
     * @return $this
     */
    public function setRegistrarStatusReason($registrarStatusReason)
    {
        $this->container['registrarStatusReason'] = $registrarStatusReason;

        return $this;
    }

    /**
     * Gets removeCancelation
     *
     * @return bool
     */
    public function getRemoveCancelation()
    {
        return $this->container['removeCancelation'];
    }

    /**
     * Sets removeCancelation
     *
     * @param bool $removeCancelation Remove cancelation.
     *
     * @return $this
     */
    public function setRemoveCancelation($removeCancelation)
    {
        $this->container['removeCancelation'] = $removeCancelation;

        return $this;
    }

    /**
     * Gets autodnsSecJob
     *
     * @return \Domainrobot\Model\DNSSecJob
     */
    public function getAutodnsSecJob()
    {
        return $this->container['autodnsSecJob'];
    }

    /**
     * Sets autodnsSecJob
     *
     * @param \Domainrobot\Model\DNSSecJob $autodnsSecJob AutodnsSecJob
     *
     * @return $this
     */
    public function setAutodnsSecJob($autodnsSecJob)
    {
        $this->container['autodnsSecJob'] = $autodnsSecJob;

        return $this;
    }

    /**
     * Gets priceClass
     *
     * @return string
     */
    public function getPriceClass()
    {
        return $this->container['priceClass'];
    }

    /**
     * Sets priceClass
     *
     * @param string $priceClass The priceclass for the registration of the domain.
     *
     * @return $this
     */
    public function setPriceClass($priceClass)
    {
        $this->container['priceClass'] = $priceClass;

        return $this;
    }

    /**
     * Gets priceClassRenew
     *
     * @return string
     */
    public function getPriceClassRenew()
    {
        return $this->container['priceClassRenew'];
    }

    /**
     * Sets priceClassRenew
     *
     * @param string $priceClassRenew The priceclass for the renew of the domain.
     *
     * @return $this
     */
    public function setPriceClassRenew($priceClassRenew)
    {
        $this->container['priceClassRenew'] = $priceClassRenew;

        return $this;
    }

    /**
     * Gets abuseEmail
     *
     * @return string
     */
    public function getAbuseEmail()
    {
        return $this->container['abuseEmail'];
    }

    /**
     * Sets abuseEmail
     *
     * @param string $abuseEmail The abuse email.
     *
     * @return $this
     */
    public function setAbuseEmail($abuseEmail)
    {
        $this->container['abuseEmail'] = $abuseEmail;

        return $this;
    }

    /**
     * Gets generalRequestEmail
     *
     * @return string
     */
    public function getGeneralRequestEmail()
    {
        return $this->container['generalRequestEmail'];
    }

    /**
     * Sets generalRequestEmail
     *
     * @param string $generalRequestEmail The general request mail.
     *
     * @return $this
     */
    public function setGeneralRequestEmail($generalRequestEmail)
    {
        $this->container['generalRequestEmail'] = $generalRequestEmail;

        return $this;
    }

    /**
     * Gets privacyPlusMail
     *
     * @return string
     */
    public function getPrivacyPlusMail()
    {
        return $this->container['privacyPlusMail'];
    }

    /**
     * Sets privacyPlusMail
     *
     * @param string $privacyPlusMail The privacy plus mail.
     *
     * @return $this
     */
    public function setPrivacyPlusMail($privacyPlusMail)
    {
        $this->container['privacyPlusMail'] = $privacyPlusMail;

        return $this;
    }

    /**
     * Gets privacyPlus
     *
     * @return bool
     */
    public function getPrivacyPlus()
    {
        return $this->container['privacyPlus'];
    }

    /**
     * Sets privacyPlus
     *
     * @param bool $privacyPlus Enable privacy plus.
     *
     * @return $this
     */
    public function setPrivacyPlus($privacyPlus)
    {
        $this->container['privacyPlus'] = $privacyPlus;

        return $this;
    }

    /**
     * Gets nameServerGroup
     *
     * @return string
     */
    public function getNameServerGroup()
    {
        return $this->container['nameServerGroup'];
    }

    /**
     * Sets nameServerGroup
     *
     * @param string $nameServerGroup The nameserver group.
     *
     * @return $this
     */
    public function setNameServerGroup($nameServerGroup)
    {
        $this->container['nameServerGroup'] = $nameServerGroup;

        return $this;
    }

    /**
     * Gets rddsOptIn
     *
     * @return \Domainrobot\Model\RddsOptInConstants
     */
    public function getRddsOptIn()
    {
        return $this->container['rddsOptIn'];
    }

    /**
     * Sets rddsOptIn
     *
     * @param \Domainrobot\Model\RddsOptInConstants $rddsOptIn Enables the whois output to show redacted contacts.
     *
     * @return $this
     */
    public function setRddsOptIn($rddsOptIn)
    {
        $this->container['rddsOptIn'] = $rddsOptIn;

        return $this;
    }

    /**
     * Gets servicesAdd
     *
     * @return \Domainrobot\Model\DomainServices
     */
    public function getServicesAdd()
    {
        return $this->container['servicesAdd'];
    }

    /**
     * Sets servicesAdd
     *
     * @param \Domainrobot\Model\DomainServices $servicesAdd Adds pending services like BackupMX and MailProxy.
     *
     * @return $this
     */
    public function setServicesAdd($servicesAdd)
    {
        $this->container['servicesAdd'] = $servicesAdd;

        return $this;
    }

    /**
     * Gets servicesRem
     *
     * @return \Domainrobot\Model\DomainServices
     */
    public function getServicesRem()
    {
        return $this->container['servicesRem'];
    }

    /**
     * Sets servicesRem
     *
     * @param \Domainrobot\Model\DomainServices $servicesRem Removes pending services like BackupMX and MailProxy.
     *
     * @return $this
     */
    public function setServicesRem($servicesRem)
    {
        $this->container['servicesRem'] = $servicesRem;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return \DateTime
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param \DateTime $deleted The date at deletion of the domain
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets restorePhaseEnd
     *
     * @return \DateTime
     */
    public function getRestorePhaseEnd()
    {
        return $this->container['restorePhaseEnd'];
    }

    /**
     * Sets restorePhaseEnd
     *
     * @param \DateTime $restorePhaseEnd The end of current restore phase
     *
     * @return $this
     */
    public function setRestorePhaseEnd($restorePhaseEnd)
    {
        $this->container['restorePhaseEnd'] = $restorePhaseEnd;

        return $this;
    }

    /**
     * Gets ownerc
     *
     * @return \Domainrobot\Model\Contact
     */
    public function getOwnerc()
    {
        return $this->container['ownerc'];
    }

    /**
     * Sets ownerc
     *
     * @param \Domainrobot\Model\Contact $ownerc The owner contact.
     *
     * @return $this
     */
    public function setOwnerc($ownerc)
    {
        $this->container['ownerc'] = $ownerc;

        return $this;
    }

    /**
     * Gets adminc
     *
     * @return \Domainrobot\Model\Contact
     */
    public function getAdminc()
    {
        return $this->container['adminc'];
    }

    /**
     * Sets adminc
     *
     * @param \Domainrobot\Model\Contact $adminc The administrative contact.
     *
     * @return $this
     */
    public function setAdminc($adminc)
    {
        $this->container['adminc'] = $adminc;

        return $this;
    }

    /**
     * Gets techc
     *
     * @return \Domainrobot\Model\Contact
     */
    public function getTechc()
    {
        return $this->container['techc'];
    }

    /**
     * Sets techc
     *
     * @param \Domainrobot\Model\Contact $techc The technical contact reference.
     *
     * @return $this
     */
    public function setTechc($techc)
    {
        $this->container['techc'] = $techc;

        return $this;
    }

    /**
     * Gets zonec
     *
     * @return \Domainrobot\Model\Contact
     */
    public function getZonec()
    {
        return $this->container['zonec'];
    }

    /**
     * Sets zonec
     *
     * @param \Domainrobot\Model\Contact $zonec The dns contact.
     *
     * @return $this
     */
    public function setZonec($zonec)
    {
        $this->container['zonec'] = $zonec;

        return $this;
    }

    /**
     * Gets expire
     *
     * @return \DateTime
     */
    public function getExpire()
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire
     *
     * @param \DateTime $expire The expire date of the domain.
     *
     * @return $this
     */
    public function setExpire($expire)
    {
        $this->container['expire'] = $expire;

        return $this;
    }

    /**
     * Gets payable
     *
     * @return \DateTime
     */
    public function getPayable()
    {
        return $this->container['payable'];
    }

    /**
     * Sets payable
     *
     * @param \DateTime $payable The payable date of the domain.
     *
     * @return $this
     */
    public function setPayable($payable)
    {
        $this->container['payable'] = $payable;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \Domainrobot\Model\DomainActionConstants
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \Domainrobot\Model\DomainActionConstants $action The last action.
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets autoDnssec
     *
     * @return bool
     */
    public function getAutoDnssec()
    {
        return $this->container['autoDnssec'];
    }

    /**
     * Sets autoDnssec
     *
     * @param bool $autoDnssec Enables or disables automatic DNSSEC for certain name servers (e.g. NodeSecure).
     *
     * @return $this
     */
    public function setAutoDnssec($autoDnssec)
    {
        $this->container['autoDnssec'] = $autoDnssec;

        return $this;
    }

    /**
     * Gets dnssec
     *
     * @return bool
     */
    public function getDnssec()
    {
        return $this->container['dnssec'];
    }

    /**
     * Sets dnssec
     *
     * @param bool $dnssec Indicates whether DNSSEC is enabled for the domain or not.
     *
     * @return $this
     */
    public function setDnssec($dnssec)
    {
        $this->container['dnssec'] = $dnssec;

        return $this;
    }

    /**
     * Gets validCertificate
     *
     * @return bool
     */
    public function getValidCertificate()
    {
        return $this->container['validCertificate'];
    }

    /**
     * Sets validCertificate
     *
     * @param bool $validCertificate Domain has an matching certificate.
     *
     * @return $this
     */
    public function setValidCertificate($validCertificate)
    {
        $this->container['validCertificate'] = $validCertificate;

        return $this;
    }

    /**
     * Gets cancelationStatus
     *
     * @return \Domainrobot\Model\CancelationStatusConstants
     */
    public function getCancelationStatus()
    {
        return $this->container['cancelationStatus'];
    }

    /**
     * Sets cancelationStatus
     *
     * @param \Domainrobot\Model\CancelationStatusConstants $cancelationStatus The cancelation status.
     *
     * @return $this
     */
    public function setCancelationStatus($cancelationStatus)
    {
        $this->container['cancelationStatus'] = $cancelationStatus;

        return $this;
    }

    /**
     * Gets autoRenewStatus
     *
     * @return \Domainrobot\Model\AutoRenewStatusConstants
     */
    public function getAutoRenewStatus()
    {
        return $this->container['autoRenewStatus'];
    }

    /**
     * Sets autoRenewStatus
     *
     * @param \Domainrobot\Model\AutoRenewStatusConstants $autoRenewStatus The autorenew status.
     *
     * @return $this
     */
    public function setAutoRenewStatus($autoRenewStatus)
    {
        $this->container['autoRenewStatus'] = $autoRenewStatus;

        return $this;
    }

    /**
     * Gets dnssecData
     *
     * @return \Domainrobot\Model\DNSSec[]
     */
    public function getDnssecData()
    {
        return $this->container['dnssecData'];
    }

    /**
     * Sets dnssecData
     *
     * @param \Domainrobot\Model\DNSSec[] $dnssecData Submits the key material to the registry. If the list is empty, the key material is deleted at the registry. If the key is omitted during an update, the data is retained.
     *
     * @return $this
     */
    public function setDnssecData($dnssecData)
    {
        $this->container['dnssecData'] = $dnssecData;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \Domainrobot\Model\Zone
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \Domainrobot\Model\Zone $zone The zone to create.
     *
     * @return $this
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!$retrieveAllValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
            if(is_array($value)){
                foreach($value as &$v){
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


