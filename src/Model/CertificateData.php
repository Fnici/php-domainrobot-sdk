<?php
/**
 * CertificateData
 *
 * PHP version 5
 *
 * @category Class
 * @package  IXDomainRobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IXDomainRobot\Model;

use \ArrayAccess;
use \IXDomainRobot\ObjectSerializer;

/**
 * CertificateData Class Doc Comment
 *
 * @category Class
 * @package  IXDomainRobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CertificateData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CertificateData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'plain' => 'string',
        'name' => 'string',
        'san' => 'string[]',
        'histories' => '\IXDomainRobot\Model\CertificateHistory[]',
        'keySize' => 'int',
        'countryCode' => 'string',
        'challengePassword' => 'string',
        'state' => 'string',
        'city' => 'string',
        'organization' => 'string',
        'organizationUnit' => 'string',
        'email' => 'string',
        'product' => 'string',
        'authentication' => '\IXDomainRobot\Model\CertAuthentication[]',
        'algorithm' => '\IXDomainRobot\Model\CsrHashAlgorithmConstants',
        'signatureHashAlgorithm' => '\IXDomainRobot\Model\SignatureHashAlgorithmConstants',
        'idn' => 'string',
        'checkCaa' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'plain' => null,
        'name' => null,
        'san' => null,
        'histories' => null,
        'keySize' => 'int32',
        'countryCode' => null,
        'challengePassword' => null,
        'state' => null,
        'city' => null,
        'organization' => null,
        'organizationUnit' => null,
        'email' => null,
        'product' => null,
        'authentication' => null,
        'algorithm' => null,
        'signatureHashAlgorithm' => null,
        'idn' => null,
        'checkCaa' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plain' => 'plain',
        'name' => 'name',
        'san' => 'san',
        'histories' => 'histories',
        'keySize' => 'keySize',
        'countryCode' => 'countryCode',
        'challengePassword' => 'challengePassword',
        'state' => 'state',
        'city' => 'city',
        'organization' => 'organization',
        'organizationUnit' => 'organizationUnit',
        'email' => 'email',
        'product' => 'product',
        'authentication' => 'authentication',
        'algorithm' => 'algorithm',
        'signatureHashAlgorithm' => 'signatureHashAlgorithm',
        'idn' => 'idn',
        'checkCaa' => 'checkCaa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plain' => 'setPlain',
        'name' => 'setName',
        'san' => 'setSan',
        'histories' => 'setHistories',
        'keySize' => 'setKeySize',
        'countryCode' => 'setCountryCode',
        'challengePassword' => 'setChallengePassword',
        'state' => 'setState',
        'city' => 'setCity',
        'organization' => 'setOrganization',
        'organizationUnit' => 'setOrganizationUnit',
        'email' => 'setEmail',
        'product' => 'setProduct',
        'authentication' => 'setAuthentication',
        'algorithm' => 'setAlgorithm',
        'signatureHashAlgorithm' => 'setSignatureHashAlgorithm',
        'idn' => 'setIdn',
        'checkCaa' => 'setCheckCaa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plain' => 'getPlain',
        'name' => 'getName',
        'san' => 'getSan',
        'histories' => 'getHistories',
        'keySize' => 'getKeySize',
        'countryCode' => 'getCountryCode',
        'challengePassword' => 'getChallengePassword',
        'state' => 'getState',
        'city' => 'getCity',
        'organization' => 'getOrganization',
        'organizationUnit' => 'getOrganizationUnit',
        'email' => 'getEmail',
        'product' => 'getProduct',
        'authentication' => 'getAuthentication',
        'algorithm' => 'getAlgorithm',
        'signatureHashAlgorithm' => 'getSignatureHashAlgorithm',
        'idn' => 'getIdn',
        'checkCaa' => 'getCheckCaa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plain'] = isset($data['plain']) ? $data['plain'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['san'] = isset($data['san']) ? $data['san'] : null;
        $this->container['histories'] = isset($data['histories']) ? $data['histories'] : null;
        $this->container['keySize'] = isset($data['keySize']) ? $data['keySize'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['challengePassword'] = isset($data['challengePassword']) ? $data['challengePassword'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['organizationUnit'] = isset($data['organizationUnit']) ? $data['organizationUnit'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['authentication'] = isset($data['authentication']) ? $data['authentication'] : null;
        $this->container['algorithm'] = isset($data['algorithm']) ? $data['algorithm'] : null;
        $this->container['signatureHashAlgorithm'] = isset($data['signatureHashAlgorithm']) ? $data['signatureHashAlgorithm'] : null;
        $this->container['idn'] = isset($data['idn']) ? $data['idn'] : null;
        $this->container['checkCaa'] = isset($data['checkCaa']) ? $data['checkCaa'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plain
     *
     * @return string
     */
    public function getPlain()
    {
        return $this->container['plain'];
    }

    /**
     * Sets plain
     *
     * @param string $plain The plain csr.
     *
     * @return $this
     */
    public function setPlain($plain)
    {
        $this->container['plain'] = $plain;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The common name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets san
     *
     * @return string[]
     */
    public function getSan()
    {
        return $this->container['san'];
    }

    /**
     * Sets san
     *
     * @param string[] $san The subject alternative names, listed in the csr.
     *
     * @return $this
     */
    public function setSan($san)
    {
        $this->container['san'] = $san;

        return $this;
    }

    /**
     * Gets histories
     *
     * @return \IXDomainRobot\Model\CertificateHistory[]
     */
    public function getHistories()
    {
        return $this->container['histories'];
    }

    /**
     * Sets histories
     *
     * @param \IXDomainRobot\Model\CertificateHistory[] $histories The certificate history.
     *
     * @return $this
     */
    public function setHistories($histories)
    {
        $this->container['histories'] = $histories;

        return $this;
    }

    /**
     * Gets keySize
     *
     * @return int
     */
    public function getKeySize()
    {
        return $this->container['keySize'];
    }

    /**
     * Sets keySize
     *
     * @param int $keySize The size of the csr key.
     *
     * @return $this
     */
    public function setKeySize($keySize)
    {
        $this->container['keySize'] = $keySize;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode The country code defined in the csr.
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets challengePassword
     *
     * @return string
     */
    public function getChallengePassword()
    {
        return $this->container['challengePassword'];
    }

    /**
     * Sets challengePassword
     *
     * @param string $challengePassword The password defined in the csr.
     *
     * @return $this
     */
    public function setChallengePassword($challengePassword)
    {
        $this->container['challengePassword'] = $challengePassword;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state defined in the csr.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city defined in the csr.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization The organization defined in the csr.
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets organizationUnit
     *
     * @return string
     */
    public function getOrganizationUnit()
    {
        return $this->container['organizationUnit'];
    }

    /**
     * Sets organizationUnit
     *
     * @param string $organizationUnit The organization unit defined in the csr.
     *
     * @return $this
     */
    public function setOrganizationUnit($organizationUnit)
    {
        $this->container['organizationUnit'] = $organizationUnit;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email defined in the csr.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product The ssl product.
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return \IXDomainRobot\Model\CertAuthentication[]
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param \IXDomainRobot\Model\CertAuthentication[] $authentication The authentication data.
     *
     * @return $this
     */
    public function setAuthentication($authentication)
    {
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets algorithm
     *
     * @return \IXDomainRobot\Model\CsrHashAlgorithmConstants
     */
    public function getAlgorithm()
    {
        return $this->container['algorithm'];
    }

    /**
     * Sets algorithm
     *
     * @param \IXDomainRobot\Model\CsrHashAlgorithmConstants $algorithm The csr algorithm.
     *
     * @return $this
     */
    public function setAlgorithm($algorithm)
    {
        $this->container['algorithm'] = $algorithm;

        return $this;
    }

    /**
     * Gets signatureHashAlgorithm
     *
     * @return \IXDomainRobot\Model\SignatureHashAlgorithmConstants
     */
    public function getSignatureHashAlgorithm()
    {
        return $this->container['signatureHashAlgorithm'];
    }

    /**
     * Sets signatureHashAlgorithm
     *
     * @param \IXDomainRobot\Model\SignatureHashAlgorithmConstants $signatureHashAlgorithm The signature hash algorithm.
     *
     * @return $this
     */
    public function setSignatureHashAlgorithm($signatureHashAlgorithm)
    {
        $this->container['signatureHashAlgorithm'] = $signatureHashAlgorithm;

        return $this;
    }

    /**
     * Gets idn
     *
     * @return string
     */
    public function getIdn()
    {
        return $this->container['idn'];
    }

    /**
     * Sets idn
     *
     * @param string $idn The idn version of the common name.
     *
     * @return $this
     */
    public function setIdn($idn)
    {
        $this->container['idn'] = $idn;

        return $this;
    }

    /**
     * Gets checkCaa
     *
     * @return bool
     */
    public function getCheckCaa()
    {
        return $this->container['checkCaa'];
    }

    /**
     * Sets checkCaa
     *
     * @param bool $checkCaa Activates the caa record check.
     *
     * @return $this
     */
    public function setCheckCaa($checkCaa)
    {
        $this->container['checkCaa'] = $checkCaa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns all values
     * toArray(true) => returns only non empty values
     * toArray(true, ["key"]) => returns all non empty values and "key" even if empty
     * toArray(true, ["key:no_empty_value"]) => returns all non empty values and "key" if not empty
     */
    public function toArray($removeEmptyValues = false, $retrieveKeys = []){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!in_array($key, $retrieveKeys) && $removeEmptyValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            if(in_array($key.":no_empty_value", $retrieveKeys)){
                unset($container[$key]);
                continue;
            }
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
        };
        return $container;
    }
}


