<?php
/**
 * ContactGeneralExtensions
 *
 * PHP version 5
 *
 * @category Class
 * @package  IXDomainRobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IXDomainRobot\Model;

use \ArrayAccess;
use \IXDomainRobot\ObjectSerializer;

/**
 * ContactGeneralExtensions Class Doc Comment
 *
 * @category Class
 * @package  IXDomainRobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactGeneralExtensions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactGeneralExtensions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'birth' => '\IXDomainRobot\Model\ContactBirthExtensions',
        'trademark' => '\IXDomainRobot\Model\ContactTrademarkExtensions',
        'identification' => '\IXDomainRobot\Model\ContactIdentificationExtensions',
        'language' => 'string',
        'companyNumber' => 'string',
        'gender' => '\IXDomainRobot\Model\GenderConstants',
        'vatNumber' => 'string',
        'citizenship' => 'string',
        'mobilePhone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'birth' => null,
        'trademark' => null,
        'identification' => null,
        'language' => null,
        'companyNumber' => null,
        'gender' => null,
        'vatNumber' => null,
        'citizenship' => null,
        'mobilePhone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'birth' => 'birth',
        'trademark' => 'trademark',
        'identification' => 'identification',
        'language' => 'language',
        'companyNumber' => 'companyNumber',
        'gender' => 'gender',
        'vatNumber' => 'vatNumber',
        'citizenship' => 'citizenship',
        'mobilePhone' => 'mobilePhone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'birth' => 'setBirth',
        'trademark' => 'setTrademark',
        'identification' => 'setIdentification',
        'language' => 'setLanguage',
        'companyNumber' => 'setCompanyNumber',
        'gender' => 'setGender',
        'vatNumber' => 'setVatNumber',
        'citizenship' => 'setCitizenship',
        'mobilePhone' => 'setMobilePhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'birth' => 'getBirth',
        'trademark' => 'getTrademark',
        'identification' => 'getIdentification',
        'language' => 'getLanguage',
        'companyNumber' => 'getCompanyNumber',
        'gender' => 'getGender',
        'vatNumber' => 'getVatNumber',
        'citizenship' => 'getCitizenship',
        'mobilePhone' => 'getMobilePhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['birth'] = isset($data['birth']) ? $data['birth'] : null;
        $this->container['trademark'] = isset($data['trademark']) ? $data['trademark'] : null;
        $this->container['identification'] = isset($data['identification']) ? $data['identification'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['companyNumber'] = isset($data['companyNumber']) ? $data['companyNumber'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['vatNumber'] = isset($data['vatNumber']) ? $data['vatNumber'] : null;
        $this->container['citizenship'] = isset($data['citizenship']) ? $data['citizenship'] : null;
        $this->container['mobilePhone'] = isset($data['mobilePhone']) ? $data['mobilePhone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets birth
     *
     * @return \IXDomainRobot\Model\ContactBirthExtensions
     */
    public function getBirth()
    {
        return $this->container['birth'];
    }

    /**
     * Sets birth
     *
     * @param \IXDomainRobot\Model\ContactBirthExtensions $birth The birth extensions.
     *
     * @return $this
     */
    public function setBirth($birth)
    {
        $this->container['birth'] = $birth;

        return $this;
    }

    /**
     * Gets trademark
     *
     * @return \IXDomainRobot\Model\ContactTrademarkExtensions
     */
    public function getTrademark()
    {
        return $this->container['trademark'];
    }

    /**
     * Sets trademark
     *
     * @param \IXDomainRobot\Model\ContactTrademarkExtensions $trademark The trademark extensions.
     *
     * @return $this
     */
    public function setTrademark($trademark)
    {
        $this->container['trademark'] = $trademark;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return \IXDomainRobot\Model\ContactIdentificationExtensions
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param \IXDomainRobot\Model\ContactIdentificationExtensions $identification The identification extensions.
     *
     * @return $this
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The language.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets companyNumber
     *
     * @return string
     */
    public function getCompanyNumber()
    {
        return $this->container['companyNumber'];
    }

    /**
     * Sets companyNumber
     *
     * @param string $companyNumber The company number.
     *
     * @return $this
     */
    public function setCompanyNumber($companyNumber)
    {
        $this->container['companyNumber'] = $companyNumber;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \IXDomainRobot\Model\GenderConstants
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \IXDomainRobot\Model\GenderConstants $gender The gender.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets vatNumber
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vatNumber'];
    }

    /**
     * Sets vatNumber
     *
     * @param string $vatNumber The vatnumber.
     *
     * @return $this
     */
    public function setVatNumber($vatNumber)
    {
        $this->container['vatNumber'] = $vatNumber;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string $citizenship The citizenship.
     *
     * @return $this
     */
    public function setCitizenship($citizenship)
    {
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets mobilePhone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobilePhone'];
    }

    /**
     * Sets mobilePhone
     *
     * @param string $mobilePhone The mobile phonenumber.
     *
     * @return $this
     */
    public function setMobilePhone($mobilePhone)
    {
        $this->container['mobilePhone'] = $mobilePhone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!$retrieveAllValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
            if(is_array($value)){
                foreach($value as &$v){
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


